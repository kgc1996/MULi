import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
import numpy as np
from sklearn.metrics import f1_score, precision_score, recall_score
from sklearn.metrics import roc_curve, auc

def draw_auc(y,predicted_probs):
    predicted_probs_0 = []
    predicted_probs_1 = []
    for i in range(len(predicted_probs)):
        predicted_probs_0.append(predicted_probs[i][0])
        predicted_probs_1.append(predicted_probs[i][1])
    fpr, tpr, thresholds = roc_curve(y, predicted_probs_1, pos_label=1)
    print(fpr, tpr)
    auc_num = auc(fpr, tpr)
    plt.xlim(-1, 2)
    plt.ylim(-1, 2)
    plt.plot(fpr, tpr, label='LightGBM (AUC = {:.3f})'.format(auc_num))
    plt.plot([0, 1], [0, 1], 'k--')
    plt.xlabel('False positive rate')
    plt.ylabel('True positive rate')
    plt.title('ROC curve ')
    plt.legend(loc='best')
    plt.show()
    plt.close()


data = pd.read_csv('TRAIN_DATA.csv')
data_dropna = data.dropna(how='any') 
train_parm_list = ['NDVI','Slope','Elevation','Rainfall','Rock','Landcover','Aspect','Fault','River','Road']
TrainData_x= data_dropna.loc[:,train_parm_list]
TrainData_y= data_dropna.loc[:,['result']].values.ravel()
TrainData_x_train,TrainData_x_train_test,TrainData_y_train,TrainData_y_test = train_test_split(TrainData_x,TrainData_y,test_size=0.3,random_state=1)

forest = RandomForestClassifier(random_state=1,n_jobs=-1)
forest.fit(TrainData_x_train, TrainData_y_train)

quanzhong = forest.feature_importances_
print('权重合计：%.1f '%sum(quanzhong))
for i in range(len(quanzhong)):
    add_str = '          '
    print('元素：',train_parm_list[i],add_str[0:10-len(train_parm_list[i])],' 的权重：%.4f '%quanzhong[i]) 
plt.figure()
plt.rcParams['font.sans-serif'] = ['SimHei']
plt.rcParams['axes.unicode_minus'] = False        
plt.bar(train_parm_list,quanzhong)
plt.xlabel('影响因子')
plt.ylabel('权重')
plt.title('影响因子权重图')
plt.show()
plt.close()

TrainData_x_train_predict= forest.predict(TrainData_x_train)
predicted_probs = forest.predict_proba(TrainData_x_train)
a = forest.score(TrainData_x_train,TrainData_y_train)                              
f1 = f1_score(TrainData_y_train,TrainData_x_train_predict, average='macro' )       
p = precision_score(TrainData_y_train,TrainData_x_train_predict, average='macro')  
r = recall_score(TrainData_y_train,TrainData_x_train_predict, average='macro')     
print('\n训练集 - 准确率：%.4f '%a,'查准率:%.4f'%p,'召回率:%.4f '%r,'F1:%.4f '%f1)
draw_auc(TrainData_y_train, predicted_probs)

TrainData_x_train_test_predict= forest.predict(TrainData_x_train_test)
predicted_probs = forest.predict_proba(TrainData_x_train_test)
a = forest.score(TrainData_x_train_test,TrainData_y_test)                               
f1 = f1_score(TrainData_y_test, TrainData_x_train_test_predict, average='macro' )       
p = precision_score(TrainData_y_test, TrainData_x_train_test_predict, average='macro') 
r = recall_score(TrainData_y_test, TrainData_x_train_test_predict, average='macro')    
print('测试集 - 准确率：%.4f '%a,'查准率:%.4f'%p,'召回率:%.4f '%r,'F1:%.4f '%f1,'\n')
draw_auc(TrainData_y_test, predicted_probs)
